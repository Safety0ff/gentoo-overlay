diff --git a/runtime/druntime/src/core/sys/posix/fcntl.d b/runtime/druntime/src/core/sys/posix/fcntl.d
index 5bd4571..7672289 100644
--- a/runtime/druntime/src/core/sys/posix/fcntl.d
+++ b/runtime/druntime/src/core/sys/posix/fcntl.d
@@ -114,6 +114,19 @@ version( linux )
         enum O_RSYNC        = O_SYNC;
         enum O_SYNC         = 0x0010;
     }
+    else version (PPC64)
+    {
+        enum O_CREAT        = 0x40;     // octal     0100
+        enum O_EXCL         = 0x80;     // octal     0200
+        enum O_NOCTTY       = 0x100;    // octal     0400
+        enum O_TRUNC        = 0x200;    // octal    01000
+
+        enum O_APPEND       = 0x400;    // octal    02000
+        enum O_NONBLOCK     = 0x800;    // octal    04000
+        enum O_SYNC         = 0x101000; // octal 04010000
+        enum O_DSYNC        = 0x1000;   // octal   010000
+        enum O_RSYNC        = O_SYNC;
+    }
     else
     {
         enum O_CREAT        = 0x40;   // octal   0100
diff --git a/runtime/druntime/src/core/sys/posix/ucontext.d b/runtime/druntime/src/core/sys/posix/ucontext.d
index 0aa2e58..45b0512 100644
--- a/runtime/druntime/src/core/sys/posix/ucontext.d
+++ b/runtime/druntime/src/core/sys/posix/ucontext.d
@@ -270,6 +270,73 @@ version( linux )
             sigset_t    uc_sigmask;
         }
     }
+    else version (PPC64)
+    {
+        private
+        {
+            enum NGREG  = 48;
+            enum NFPREG = 33;
+            enum NVRREG = 34;
+
+            alias c_ulong        greg_t;
+            alias greg_t[NGREG]  gregset_t;
+            alias double[NFPREG] fpregset_t;
+
+            struct vscr_t
+            {
+                uint[3] __pad;
+                uint    vscr_word;
+            }
+
+            struct vrregset_t
+            {
+                uint[32][4] vrregs;
+                vscr_t      vscr;
+                uint        vrsave;
+                uint[3]     __pad;
+            }
+
+            struct pt_regs
+            {
+                c_ulong[32] gpr;
+                c_ulong     nip;
+                c_ulong     msr;
+                c_ulong     orig_gpr3;
+                c_ulong     ctr;
+                c_ulong     link;
+                c_ulong     xer;
+                c_ulong     ccr;
+                c_ulong     softe;
+                c_ulong     trap;
+                c_ulong     dar;
+                c_ulong     dsisr;
+                c_ulong     result;
+            };
+        }
+
+        struct mcontext_t
+        {
+            c_ulong[4] __unused;
+            int signal;
+            int __pad0;
+            c_ulong handler;
+            c_ulong oldmask;
+            pt_regs* regs;
+            gregset_t gp_regs;
+            fpregset_t fp_regs;
+            vrregset_t *v_regs;
+            c_long[NVRREG+NVRREG+1] vmx_reserve;
+        }
+
+        struct ucontext_t
+        {
+            c_ulong     uc_flags;
+            ucontext_t* uc_link;
+            stack_t     uc_stack;
+            sigset_t    uc_sigmask;
+            mcontext_t  uc_mcontext;
+        }
+    }
     else
         static assert(0, "unimplemented");
 }
diff --git a/runtime/druntime/src/core/thread.d b/runtime/druntime/src/core/thread.d
index 68aff90..b1a5179 100644
--- a/runtime/druntime/src/core/thread.d
+++ b/runtime/druntime/src/core/thread.d
@@ -3210,6 +3210,13 @@ private
             version = AsmExternal;
         }
     }
+    else version( PPC64 )
+    {
+        version( Posix )
+        {
+            version = AlignFiberStackTo16Byte;
+        }
+    }
     else version( MIPS_O32 )
     {
         version( Posix )
@@ -4412,7 +4419,12 @@ version (D_LP64)
     else version (OSX)
         static assert(__traits(classInstanceSize, Fiber) == 88);
     else version (Posix)
-        static assert(__traits(classInstanceSize, Fiber) == 88);
+    {
+        static if( __traits( compiles, ucontext_t ) )
+            static assert(__traits(classInstanceSize, Fiber) == 88 + ucontext_t.sizeof + 8);
+        else
+            static assert(__traits(classInstanceSize, Fiber) == 88);
+    }
     else
         static assert(0, "Platform not supported.");
 }
@@ -4425,7 +4437,12 @@ else
     else version (OSX)
         static assert(__traits(classInstanceSize, Fiber) == 44);
     else version (Posix)
-        static assert(__traits(classInstanceSize, Fiber) == 44);
+    {
+        static if( __traits( compiles, ucontext_t ) )
+            static assert(__traits(classInstanceSize, Fiber) == 44 + ucontext_t.sizeof + 4);
+        else
+            static assert(__traits(classInstanceSize, Fiber) == 44);
+    }
     else
         static assert(0, "Platform not supported.");
 }
diff --git a/runtime/druntime/src/core/thread.di b/runtime/druntime/src/core/thread.di
index f402cb5..74af084 100644
--- a/runtime/druntime/src/core/thread.di
+++ b/runtime/druntime/src/core/thread.di
@@ -798,6 +798,50 @@ private:
 // Fiber Platform Detection and Memory Allocation
 ///////////////////////////////////////////////////////////////////////////////

+private
+{
+    // These must be kept in sync with core/thread.d
+    version( D_InlineAsm_X86 )
+    {
+        version( Windows )
+            version = NoUcontext;
+        else version( Posix )
+            version = NoUcontext;
+    }
+    else version( D_InlineAsm_X86_64 )
+    {
+        version( Windows )
+            version = NoUcontext;
+        else version( Posix )
+            version = NoUcontext;
+    }
+    else version( PPC )
+    {
+        version( Posix )
+            version = NoUcontext;
+    }
+    else version( PPC64 )
+    {
+        version( Posix )
+        {
+            // uses ucontext_t.
+        }
+    }
+    else version( MIPS_O32 )
+    {
+        version( Posix )
+            version = NoUcontext;
+    }
+
+    version( Posix )
+    {
+        version( NoUcontext )       {} else
+        {
+            import core.sys.posix.ucontext;
+        }
+    }
+}
+
 private extern __gshared const size_t PAGESIZE;

 shared static this();
@@ -1035,7 +1079,13 @@ private:
     {
         version (Windows)      enum FiberSize = 88;
         else version (OSX)     enum FiberSize = 88;
-        else version (Posix)   enum FiberSize = 88;
+        else version (Posix)
+        {
+            static if( __traits( compiles, ucontext_t ) )
+                enum FiberSize = 88 + ucontext_t.sizeof + 8;
+            else
+                enum FiberSize = 88;
+        }
         else static assert(0, "Platform not supported.");
     }
     else
@@ -1044,7 +1094,13 @@ private:

         version (Windows)      enum FiberSize = 44;
         else version (OSX)     enum FiberSize = 44;
-        else version (Posix)   enum FiberSize = 44;
+        else version (Posix)
+        {
+            static if( __traits( compiles, ucontext_t ) )
+                enum FiberSize = 44 + ucontext_t.sizeof + 4;
+            else
+                enum FiberSize = 44;
+        }
         else static assert(0, "Platform not supported.");
     }

diff --git a/runtime/druntime/src/core/threadasm.S b/runtime/druntime/src/core/threadasm.S
index 58342b6..30ca2b7 100644
--- a/runtime/druntime/src/core/threadasm.S
+++ b/runtime/druntime/src/core/threadasm.S
@@ -130,8 +130,144 @@ _D4core6thread18callWithStackShellFMDFPvZvZv:
     blr
     .long 0
     .quad 0
-.Lend:
-    .size _D4core6thread18callWithStackShellFMDFPvZvZv, .Lend-.L._D4core6thread18callWithStackShellFMDFPvZvZv
+    .size _D4core6thread18callWithStackShellFMDFPvZvZv, .-.L._D4core6thread18callWithStackShellFMDFPvZvZv
+    .cfi_endproc
+
+
+/**
+ * Performs a context switch.
+ *
+ * r3 - old context pointer
+ * r4 - new context pointer
+ *
+ */
+    .text
+    .align  2
+    .globl  fiber_switchContext_
+    .align  2
+    .type   fiber_switchContext_,@function
+    .section        .opd,"aw",@progbits
+fiber_switchContext_:
+    .align  3
+    .quad   .L.fiber_switchContext
+    .quad   .TOC.@tocbase
+    .quad   0
+    .text
+.L.fiber_switchContext:
+    .cfi_startproc
+
+    /* Save linkage area */
+    mflr        0
+    mfcr        5
+    std     0, 16(1)
+    std     5, 8(1)
+
+    /* Save GPRs */
+    std     11, (-1 * 8)(1)
+    std     13, (-2 * 8)(1)
+    std     14, (-3 * 8)(1)
+    std     15, (-4 * 8)(1)
+    std     16, (-5 * 8)(1)
+    std     17, (-6 * 8)(1)
+    std     18, (-7 * 8)(1)
+    std     19, (-8 * 8)(1)
+    std     20, (-9 * 8)(1)
+    std     21, (-10 * 8)(1)
+    std     22, (-11 * 8)(1)
+    std     23, (-12 * 8)(1)
+    std     24, (-13 * 8)(1)
+    std     25, (-14 * 8)(1)
+    std     26, (-15 * 8)(1)
+    std     27, (-16 * 8)(1)
+    std     28, (-17 * 8)(1)
+    std     29, (-18 * 8)(1)
+    std     30, (-19 * 8)(1)
+    stdu    31, (-20 * 8)(1)
+
+    /* We update the stack pointer here, since we do not want the GC to
+       scan the floating point registers. */
+
+    /* Save FPRs */
+    stfd    14, (-1 * 8)(1)
+    stfd    15, (-2 * 8)(1)
+    stfd    16, (-3 * 8)(1)
+    stfd    17, (-4 * 8)(1)
+    stfd    18, (-5 * 8)(1)
+    stfd    19, (-6 * 8)(1)
+    stfd    20, (-7 * 8)(1)
+    stfd    21, (-8 * 8)(1)
+    stfd    22, (-9 * 8)(1)
+    stfd    23, (-10 * 8)(1)
+    stfd    24, (-11 * 8)(1)
+    stfd    25, (-12 * 8)(1)
+    stfd    26, (-13 * 8)(1)
+    stfd    27, (-14 * 8)(1)
+    stfd    28, (-15 * 8)(1)
+    stfd    29, (-16 * 8)(1)
+    stfd    30, (-17 * 8)(1)
+    stfd    31, (-18 * 8)(1)
+
+    /* Update the old stack pointer */
+    std     1, 0(3)
+
+    /* Set new stack pointer */
+    addi        1, 4, 20 * 8
+
+    /* Restore linkage area */
+    ld      0, 16(1)
+    ld      5, 8(1)
+
+    /* Restore GPRs */
+    ld      11, (-1 * 8)(1)
+    ld      13, (-2 * 8)(1)
+    ld      14, (-3 * 8)(1)
+    ld      15, (-4 * 8)(1)
+    ld      16, (-5 * 8)(1)
+    ld      17, (-6 * 8)(1)
+    ld      18, (-7 * 8)(1)
+    ld      19, (-8 * 8)(1)
+    ld      20, (-9 * 8)(1)
+    ld      21, (-10 * 8)(1)
+    ld      22, (-11 * 8)(1)
+    ld      23, (-12 * 8)(1)
+    ld      24, (-13 * 8)(1)
+    ld      25, (-14 * 8)(1)
+    ld      26, (-15 * 8)(1)
+    ld      27, (-16 * 8)(1)
+    ld      28, (-17 * 8)(1)
+    ld      29, (-18 * 8)(1)
+    ld      30, (-19 * 8)(1)
+    ld      31, (-20 * 8)(1)
+
+
+    /* Restore FPRs */
+    lfd     14, (-1 * 8)(4)
+    lfd     15, (-2 * 8)(4)
+    lfd     16, (-3 * 8)(4)
+    lfd     17, (-4 * 8)(4)
+    lfd     18, (-5 * 8)(4)
+    lfd     19, (-6 * 8)(4)
+    lfd     20, (-7 * 8)(4)
+    lfd     21, (-8 * 8)(4)
+    lfd     22, (-9 * 8)(4)
+    lfd     23, (-10 * 8)(4)
+    lfd     24, (-11 * 8)(4)
+    lfd     25, (-12 * 8)(4)
+    lfd     26, (-13 * 8)(4)
+    lfd     27, (-14 * 8)(4)
+    lfd     28, (-15 * 8)(4)
+    lfd     29, (-16 * 8)(4)
+    lfd     30, (-17 * 8)(4)
+    lfd     31, (-18 * 8)(4)
+
+    /* Set condition and link register */
+    mtcr        5
+    mtlr        0
+
+    /* Return and switch context */
+    blr
+    .align 8
+    .size fiber_switchContext, .-fiber_switchContext
     .cfi_endproc

 #elif defined( __ppc__ ) || defined( __PPC__ ) || defined( __powerpc__ )
